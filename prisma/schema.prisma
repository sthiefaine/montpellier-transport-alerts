// Ce fichier montre uniquement les modèles pertinents - à intégrer dans votre schema.prisma existant

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Route {
  id                String             @id @map("route_id")
  shortName         String?            @map("route_short_name")
  longName          String?            @map("route_long_name")
  type              Int                @default(0) @map("route_type")
  color             String?            @map("route_color")
  textColor         String?            @map("route_text_color")
  trips             Trip[]
  stopSequence      StopSequence[]
  routeServiceTimes RouteServiceTime[]
  dailyMetrics      DailyMetric[]
  hourlyMetrics     HourlyMetric[]
  realtimeDelays    RealtimeDelay[]
  stopMetrics       StopMetric[]
  geometries        LineGeometry[]

  @@map("routes")
}

model Alert {
  id              String    @id
  timeStart       DateTime
  timeEnd         DateTime?
  cause           String    @default("UNKNOWN_CAUSE")
  effect          String    @default("UNKNOWN_EFFECT")
  headerText      String    @db.Text
  descriptionText String    @db.Text
  url             String?
  routeIds        String?
  stopIds         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isComplement    Boolean   @default(false)
  parentAlertId   String?
  parentAlert     Alert?    @relation("AlertComplements", fields: [parentAlertId], references: [id])
  complements     Alert[]   @relation("AlertComplements")

  @@map("alerts")
}

model LineGeometry {
  id          Int      @id @default(autoincrement())
  routeId     String   @map("route_id")
  lineType    String   @map("line_type") // "tram" ou "bus"
  geometry    Json     @map("geometry") // Stocke la géométrie GeoJSON
  properties  Json     @map("properties") // Stocke les propriétés supplémentaires
  lastUpdated DateTime @default(now()) @map("last_updated")
  route       Route    @relation(fields: [routeId], references: [id])

  @@index([routeId])
  @@index([lineType])
  @@map("line_geometries")
}

model Trip {
  id                   String  @id @map("trip_id")
  routeId              String  @map("route_id")
  serviceId            String  @map("service_id")
  headsign             String? @map("trip_headsign")
  directionId          Int?    @map("direction_id")
  blockId              String? @map("block_id")
  shapeId              String? @map("shape_id")
  wheelchairAccessible Int?    @map("wheelchair_accessible")
  bikesAllowed         Int?    @map("bikes_allowed")

  route          Route           @relation(fields: [routeId], references: [id])
  stopTimes      StopTime[]
  realtimeDelays RealtimeDelay[]

  @@map("trips")
}

model StopTime {
  tripId        String @map("trip_id")
  arrivalTime   String @map("arrival_time")
  departureTime String @map("departure_time")
  stopId        String @map("stop_id")
  stopSequence  Int    @map("stop_sequence")
  pickupType    Int?   @map("pickup_type")
  dropOffType   Int?   @map("drop_off_type")

  trip Trip @relation(fields: [tripId], references: [id])
  stop Stop @relation(fields: [stopId], references: [id])

  @@id([tripId, stopId, stopSequence])
  @@map("stop_times")
}

model Stop {
  id            String  @id @map("stop_id")
  code          String? @map("stop_code")
  name          String  @map("stop_name")
  lat           Float   @map("stop_lat")
  lon           Float   @map("stop_lon")
  locationType  Int?    @map("location_type")
  parentStation String? @map("parent_station")
  wheelchair    Int?    @map("wheelchair_boarding")

  stopTimes      StopTime[]
  stopSequence   StopSequence[]
  stopMetrics    StopMetric[]
  realtimeDelays RealtimeDelay[]

  @@map("stops")
}

model StopSequence {
  id          Int     @id @default(autoincrement())
  routeId     String  @map("route_id")
  stopId      String  @map("stop_id")
  directionId Int     @default(0) @map("direction_id")
  position    Int
  isTerminus  Boolean @default(false) @map("is_terminus")

  route Route @relation(fields: [routeId], references: [id])
  stop  Stop  @relation(fields: [stopId], references: [id])

  @@unique([routeId, stopId, directionId])
  @@map("stop_sequences")
}

model RouteServiceTime {
  id        Int    @id @default(autoincrement())
  routeId   String @map("route_id")
  serviceId String @map("service_id")
  startTime String @map("start_time")
  endTime   String @map("end_time")

  route Route @relation(fields: [routeId], references: [id])

  @@unique([routeId, serviceId])
  @@map("route_service_times")
}

model RealtimeDelay {
  id            Int      @id @default(autoincrement())
  tripId        String   @map("trip_id")
  routeId       String   @map("route_id")
  stopId        String   @map("stop_id")
  scheduledTime BigInt?  @map("scheduled_time")
  actualTime    BigInt?  @map("actual_time")
  delay         Int      @default(0)
  status        String   @default("SCHEDULED")
  collectedAt   DateTime @default(now()) @map("collected_at")

  trip  Trip? @relation(fields: [tripId], references: [id])
  route Route @relation(fields: [routeId], references: [id])
  stop  Stop  @relation(fields: [stopId], references: [id])

  @@index([tripId])
  @@index([routeId])
  @@index([stopId])
  @@index([collectedAt])
  @@map("realtime_delays")
}

model DailyMetric {
  id             Int      @id @default(autoincrement())
  date           DateTime
  routeId        String   @map("route_id")
  totalTrips     Int      @map("total_trips")
  totalStops     Int      @map("total_stops")
  avgDelay       Float    @map("avg_delay")
  maxDelay       Float    @map("max_delay")
  minDelay       Float    @map("min_delay")
  onTimeRate60   Float    @map("on_time_rate_60")
  lateRate60     Float    @map("late_rate_60")
  earlyRate60    Float    @map("early_rate_60")
  onTimeRate30   Float    @map("on_time_rate_30")
  lateRate30     Float    @map("late_rate_30")
  earlyRate30    Float    @map("early_rate_30")
  onTimeRate120  Float    @map("on_time_rate_120")
  lateRate120    Float    @map("late_rate_120")
  earlyRate120   Float    @map("early_rate_120")
  delayUnder30s  Float    @map("delay_under_30s")
  delay30to60s   Float    @map("delay_30_to_60s")
  delay60to120s  Float    @map("delay_60_to_120s")
  delay120to300s Float    @map("delay_120_to_300s")
  delayOver300s  Float    @map("delay_over_300s")

  route Route @relation(fields: [routeId], references: [id])

  weatherImpacts DailyWeatherImpact[]

  @@unique([date, routeId])
  @@index([date])
  @@index([routeId])
  @@map("daily_metrics")
}

model HourlyMetric {
  id             Int      @id @default(autoincrement())
  date           DateTime
  hour           Int
  routeId        String   @map("route_id")
  observations   Int
  avgDelay       Float    @map("avg_delay")
  maxDelay       Float    @map("max_delay")
  minDelay       Float    @map("min_delay")
  onTimeRate60   Float    @default(0) @map("on_time_rate_60")
  lateRate60     Float    @default(0) @map("late_rate_60")
  earlyRate60    Float    @default(0) @map("early_rate_60")
  onTimeRate30   Float    @default(0) @map("on_time_rate_30")
  lateRate30     Float    @default(0) @map("late_rate_30")
  earlyRate30    Float    @default(0) @map("early_rate_30")
  onTimeRate120  Float    @default(0) @map("on_time_rate_120")
  lateRate120    Float    @default(0) @map("late_rate_120")
  earlyRate120   Float    @default(0) @map("early_rate_120")
  delayUnder30s  Float    @default(0) @map("delay_under_30s")
  delay30to60s   Float    @default(0) @map("delay_30_to_60s")
  delay60to120s  Float    @default(0) @map("delay_60_to_120s")
  delay120to300s Float    @default(0) @map("delay_120_to_300s")
  delayOver300s  Float    @default(0) @map("delay_over_300s")

  route Route @relation(fields: [routeId], references: [id])

  weatherImpacts HourlyWeatherImpact[]

  @@unique([date, hour, routeId])
  @@index([date, hour])
  @@index([routeId])
  @@map("hourly_metrics")
}

model StopMetric {
  id           Int      @id @default(autoincrement())
  date         DateTime
  routeId      String   @map("route_id")
  stopId       String   @map("stop_id")
  observations Int
  avgDelay     Float    @map("avg_delay")
  maxDelay     Float    @map("max_delay")
  minDelay     Float    @map("min_delay")
  onTimeRate   Float    @map("on_time_rate")
  lateRate     Float    @map("late_rate")
  earlyRate    Float    @map("early_rate")

  route Route @relation(fields: [routeId], references: [id])
  stop  Stop  @relation(fields: [stopId], references: [id])

  @@unique([date, routeId, stopId])
  @@index([date])
  @@index([routeId])
  @@index([stopId])
  @@map("stop_metrics")
}

model WeatherData {
  id   Int      @id @default(autoincrement())
  date DateTime @db.Date // Date des données météo
  hour Int? // Heure (0-23), null pour les données journalières

  // Données météorologiques principales
  temperature   Float // Température en °C
  precipitation Float // Précipitations en mm
  windSpeed     Float  @map("wind_speed") // Vitesse du vent en km/h
  humidity      Float // Humidité relative en %
  cloudCover    Float  @map("cloud_cover") // Couverture nuageuse en %
  weatherCode   Int    @map("weather_code") // Code WMO du temps
  weatherType   String @map("weather_type") // Description lisible du temps

  // Données additionnelles
  snowDepth Float?  @map("snow_depth") // Épaisseur de neige en mm, si applicable
  snowfall  Float? // Chutes de neige en mm, si applicable
  isRain    Boolean @default(false) // Indique s'il pleut
  isSnow    Boolean @default(false) // Indique s'il neige
  isFog     Boolean @default(false) // Indique s'il y a du brouillard
  isStorm   Boolean @default(false) // Indique s'il y a un orage

  // Métadonnées
  location  String // Identifiant de la zone géographique
  latitude  Float // Latitude du point de mesure
  longitude Float // Longitude du point de mesure
  source    String   @default("open-meteo") // Source des données
  createdAt DateTime @default(now()) @map("created_at")

  // Relations avec les métriques de transport
  dailyMetrics  DailyWeatherImpact[]
  hourlyMetrics HourlyWeatherImpact[]

  @@unique([date, hour, location])
  @@index([date])
  @@index([location])
  @@index([weatherCode])
  @@index([date, location])
  @@map("weather_data")
}

// Tables d'association pour les relations météo-performances
model DailyWeatherImpact {
  id            Int    @id @default(autoincrement())
  dailyMetricId Int    @map("daily_metric_id")
  weatherId     Int    @map("weather_id")
  impactScore   Float? @map("impact_score") // Score calculé de l'impact (0-1)

  dailyMetric DailyMetric @relation(fields: [dailyMetricId], references: [id], onDelete: Cascade)
  weather     WeatherData @relation(fields: [weatherId], references: [id], onDelete: Cascade)

  @@unique([dailyMetricId, weatherId])
  @@map("daily_weather_impacts")
}

model HourlyWeatherImpact {
  id             Int    @id @default(autoincrement())
  hourlyMetricId Int    @map("hourly_metric_id")
  weatherId      Int    @map("weather_id")
  impactScore    Float? @map("impact_score") // Score calculé de l'impact (0-1)

  hourlyMetric HourlyMetric @relation(fields: [hourlyMetricId], references: [id], onDelete: Cascade)
  weather      WeatherData  @relation(fields: [weatherId], references: [id], onDelete: Cascade)

  @@unique([hourlyMetricId, weatherId])
  @@map("hourly_weather_impacts")
}
