// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alert {
  id            String    @id
  timeStart     DateTime
  timeEnd       DateTime?
  cause         String    @default("UNKNOWN_CAUSE")
  effect        String    @default("UNKNOWN_EFFECT")
  headerText    String    @db.Text
  descriptionText String  @db.Text
  url           String?
  routeIds      String?
  stopIds       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isComplement  Boolean   @default(false)
  parentAlertId String?
  parentAlert   Alert?    @relation("AlertComplements", fields: [parentAlertId], references: [id])
  complements   Alert[]   @relation("AlertComplements")
}

model Stop {
  id            String    @id @map("stop_id")
  code          String?   @map("stop_code")
  name          String    @map("stop_name")
  lat           Float     @map("stop_lat")
  lon           Float     @map("stop_lon")
  locationType  Int?      @map("location_type")
  parentStation String?   @map("parent_station")
  wheelchair    Int?      @map("wheelchair_boarding")
  stopTimes     StopTime[]
  realTimeDelays RealtimeDelay[]
  stopMetrics   StopMetric[]
  @@map("stops")
}

model Route {
  id           String    @id @map("route_id")
  shortName    String    @map("route_short_name")
  longName     String    @map("route_long_name")
  type         Int       @map("route_type")
  color        String?   @map("route_color")
  textColor    String?   @map("route_text_color")
  trips        Trip[]
  realTimeDelays RealtimeDelay[]
  dailyMetrics  DailyMetric[]
  hourlyMetrics HourlyMetric[]
  stopMetrics   StopMetric[]
  @@map("routes")
}

model Trip {
  id                  String    @id @map("trip_id")
  routeId             String    @map("route_id")
  serviceId           String    @map("service_id")
  headsign            String?   @map("trip_headsign")
  directionId         Int?      @map("direction_id")
  blockId             String?   @map("block_id")
  shapeId             String?   @map("shape_id")
  wheelchairAccessible Int?      @map("wheelchair_accessible")
  bikesAllowed        Int?      @map("bikes_allowed")
  route               Route     @relation(fields: [routeId], references: [id])
  stopTimes           StopTime[]
  realTimeDelays      RealtimeDelay[]
  @@map("trips")
}

model StopTime {
  tripId         String    @map("trip_id")
  arrivalTime    String    @map("arrival_time")
  departureTime  String    @map("departure_time")
  stopId         String    @map("stop_id")
  stopSequence   Int       @map("stop_sequence")
  pickupType     Int?      @map("pickup_type")
  dropOffType    Int?      @map("drop_off_type")
  trip           Trip      @relation(fields: [tripId], references: [id])
  stop           Stop      @relation(fields: [stopId], references: [id])
  @@id([tripId, stopSequence])
  @@map("stop_times")
}

model RealtimeDelay {
  id              Int       @id @default(autoincrement())
  collectedAt     DateTime  @default(now()) @map("collected_at")
  tripId          String    @map("trip_id")
  routeId         String    @map("route_id")
  stopId          String    @map("stop_id")
  scheduledTime   BigInt?   @map("scheduled_time")
  actualTime      BigInt?   @map("actual_time")
  delay           Int?      @map("delay")
  status          String?   @map("status")
  trip            Trip      @relation(fields: [tripId], references: [id])
  route           Route     @relation(fields: [routeId], references: [id])
  stop            Stop      @relation(fields: [stopId], references: [id])
  @@index([tripId])
  @@index([routeId])
  @@index([stopId])
  @@index([collectedAt])
  @@map("realtime_delays")
}


model DailyMetric {
  id            Int       @id @default(autoincrement())
  date          DateTime  @db.Date  // Jour concerné par les métriques
  routeId       String    @map("route_id")
  totalTrips    Int       @map("total_trips")
  totalStops    Int       @map("total_stops")
  avgDelay      Float     @map("avg_delay")
  maxDelay      Int       @map("max_delay")
  minDelay      Int       @map("min_delay")
  onTimeRate    Float     @map("on_time_rate")  // % de passages à l'heure (-60s à +60s)
  lateRate      Float     @map("late_rate")     // % de passages en retard (>60s)
  earlyRate     Float     @map("early_rate")    // % de passages en avance (<-60s)
  createdAt     DateTime  @default(now()) @map("created_at")
  route         Route     @relation(fields: [routeId], references: [id])

  @@unique([date, routeId])
  @@index([date])
  @@index([routeId])
  @@map("daily_metrics")
}

model HourlyMetric {
  id            Int       @id @default(autoincrement())
  date          DateTime  @db.Date  // Jour concerné
  hour          Int       // Heure de la journée (0-23)
  routeId       String    @map("route_id")
  avgDelay      Float     @map("avg_delay")
  maxDelay      Int       @map("max_delay")
  minDelay      Int       @map("min_delay")
  observations  Int       // Nombre d'observations
  onTimeRate    Float     @map("on_time_rate")
  lateRate      Float     @map("late_rate")
  earlyRate     Float     @map("early_rate")
  createdAt     DateTime  @default(now()) @map("created_at")
  route         Route     @relation(fields: [routeId], references: [id])

  @@unique([date, hour, routeId])
  @@index([date, hour])
  @@index([routeId])
  @@map("hourly_metrics")
}

model StopMetric {
  id            Int       @id @default(autoincrement())
  date          DateTime  @db.Date  // Jour concerné
  routeId       String    @map("route_id")
  stopId        String    @map("stop_id")
  avgDelay      Float     @map("avg_delay")
  maxDelay      Int       @map("max_delay")
  minDelay      Int       @map("min_delay")
  observations  Int       // Nombre d'observations
  onTimeRate    Float     @map("on_time_rate")
  lateRate      Float     @map("late_rate")
  earlyRate     Float     @map("early_rate")
  createdAt     DateTime  @default(now()) @map("created_at")
  route         Route     @relation(fields: [routeId], references: [id])
  stop          Stop      @relation(fields: [stopId], references: [id])

  @@unique([date, routeId, stopId])
  @@index([date])
  @@index([routeId])
  @@index([stopId])
  @@map("stop_metrics")
}